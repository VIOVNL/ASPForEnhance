name: Build, Zip & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. Checkout repository (fetch only latest commit for speed)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. Setup .NET 9 SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # 3. Cache NuGet packages for faster builds
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # 4. Restore NuGet packages
      - name: Restore NuGet packages
        run: dotnet restore ASPForEnhance.sln

      # 5. Update Assembly Version in csproj & Commit Changes
      - name: Update assembly version in csproj
        id: update_version
        shell: pwsh
        run: |
          $csprojPath = "Source/ASPForEnhance.csproj"
          if (!(Test-Path $csprojPath)) {
            Write-Error "Project file not found at $csprojPath"
            exit 1
          }
          [xml]$xml = Get-Content $csprojPath
          $currentVersion = $xml.Project.PropertyGroup.AssemblyVersion
          Write-Host "Current version: $currentVersion"
          
          $versionParts = $currentVersion.Split('.')
          if ($versionParts.Length -ne 4) {
            Write-Error "Unexpected version format: $currentVersion"
            exit 1
          }
          
          $patch = [int]$versionParts[2] + 1
          $versionParts[2] = $patch.ToString()
          $newVersion = $versionParts -join "."
          Write-Host "New version: $newVersion"
          
          $xml.Project.PropertyGroup.AssemblyVersion = $newVersion
          $xml.Project.PropertyGroup.AssemblyFileVersion = $newVersion
          $xml.Save($csprojPath)
          
          $zipVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"
          echo "version=$newVersion" >> $env:GITHUB_OUTPUT
          echo "zipVersion=$zipVersion" >> $env:GITHUB_OUTPUT

          # Commit and push the version update
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $csprojPath
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            git commit -m "Auto-incremented version to $newVersion"
            git push origin main
          }

      # 6. Publish as self-contained, single-file executable for x64
      - name: Publish application
        run: |
          dotnet publish Source/ASPForEnhance.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish

      # 7. Create zip artifact from the published output
      - name: Create zip artifact
        id: create_zip
        shell: pwsh
        run: |
          $publishOutput = ".\publish\"
          if (!(Test-Path $publishOutput)) {
              Write-Error "Published output folder not found: $publishOutput"
              exit 1
          }
          $zipName = "artifact-${{ steps.update_version.outputs.zipVersion }}.zip"
          Compress-Archive -Path "$publishOutput*" -DestinationPath $zipName
          Write-Host "Created zip: $zipName"
          echo "zipName=$zipName" >> $env:GITHUB_OUTPUT

      # 8. Upload build artifact (Fixed version)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ steps.create_zip.outputs.zipName }}

      # 9. Create a new GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GitToken }}
        with:
          tag_name: v${{ steps.update_version.outputs.version }}
          release_name: "Release v${{ steps.update_version.outputs.version }}"
          draft: false
          prerelease: false

      # 10. Upload the versioned zip artifact to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GitToken }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.create_zip.outputs.zipName }}
          asset_name: ${{ steps.create_zip.outputs.zipName }}
          asset_content_type: application/zip
